# /etc/haproxy/haproxy.cfg — External load balancer for OpenShift API and Ingress
# Suitable for user-provisioned/external LB scenarios (bare metal UPI, vSphere UPI, etc.).
# Notes:
# - API (6443/TCP) -> control-plane nodes (+ bootstrap during install)
# - Machine Config Server (22623/TCP) -> control-plane nodes (+ bootstrap during install; remove bootstrap after control-plane is up)
# - Ingress (443/80 TCP) -> nodes running router pods:
#     * default is workers; in 3-node control-plane-only clusters, routers run on masters.
#
# Fake environment alignment:
#   - Base domain: example.com   - Cluster: cluster.example.com
#   - VIPs: API 10.90.0.10, Ingress 10.90.0.11
#   - Node FQDNs used below: cluster-master-{1..3}.cluster.example.com, cluster-worker-{1..3}.cluster.example.com
#   - Bootstrap FQDN: bootstrap.cluster.example.com
#
# Tip: ensure DNS for api/api-int/apps VIPs points to this HAProxy (see README).

global
    log 127.0.0.1 local2
    pidfile /var/run/haproxy.pid
    maxconn 4000
    daemon

defaults
    mode tcp
    log global
    option  tcplog
    option  dontlognull
    option  http-server-close
    option  redispatch
    retries 3
    timeout http-request 10s
    timeout queue        1m
    timeout connect      10s
    timeout client       1m
    timeout server       1m
    timeout http-keep-alive 10s
    timeout check        10s
    maxconn 3000

# Kubernetes API (6443) — HTTPS health check against /readyz
listen api-server-6443
    bind *:6443
    mode tcp
    option  httpchk GET /readyz HTTP/1.0
    http-check expect string ok
    balance roundrobin
    default-server check inter 10s fall 2 rise 3
    # Bootstrap (remove after bootstrap completes)
    server bootstrap bootstrap.cluster.example.com:6443 check-ssl verify none backup
    # Control-plane nodes (masters)
    server cluster-master-1 cluster-master-1.cluster.example.com:6443 check-ssl verify none
    server cluster-master-2 cluster-master-2.cluster.example.com:6443 check-ssl verify none
    server cluster-master-3 cluster-master-3.cluster.example.com:6443 check-ssl verify none

# Machine Config Server (22623) — HTTP health check at /healthz
listen machine-config-server-22623
    bind *:22623
    mode tcp
    option httpchk GET /healthz HTTP/1.0
    balance roundrobin
    default-server check inter 1s
    # Bootstrap (remove after bootstrap completes)
    server bootstrap bootstrap.cluster.example.com:22623 backup
    # Control-plane nodes only
    server cluster-master-1 cluster-master-1.cluster.example.com:22623
    server cluster-master-2 cluster-master-2.cluster.example.com:22623
    server cluster-master-3 cluster-master-3.cluster.example.com:22623

# Ingress Router — HTTPS (443)
listen ingress-router-443
    bind *:443
    mode tcp
    balance source
    # Use workers by default; for 3-node control-plane clusters, target masters instead.
    # Masters (compact 3-node):
    server cluster-master-1 cluster-master-1.cluster.example.com:443 check inter 1s
    server cluster-master-2 cluster-master-2.cluster.example.com:443 check inter 1s
    server cluster-master-3 cluster-master-3.cluster.example.com:443 check inter 1s
    # Workers (standard clusters) — uncomment and use these instead of masters:
    # server cluster-worker-1 cluster-worker-1.cluster.example.com:443 check inter 1s
    # server cluster-worker-2 cluster-worker-2.cluster.example.com:443 check inter 1s
    # server cluster-worker-3 cluster-worker-3.cluster.example.com:443 check inter 1s

# Ingress Router — HTTP (80)
listen ingress-router-80
    bind *:80
    mode tcp
    balance source
    # Masters for compact clusters:
    server cluster-master-1 cluster-master-1.cluster.example.com:80 check inter 1s
    server cluster-master-2 cluster-master-2.cluster.example.com:80 check inter 1s
    server cluster-master-3 cluster-master-3.cluster.example.com:80 check inter 1s
    # Workers for standard clusters (uncomment and use instead of masters):
    # server cluster-worker-1 cluster-worker-1.cluster.example.com:80 check inter 1s
    # server cluster-worker-2 cluster-worker-2.cluster.example.com:80 check inter 1s
    # server cluster-worker-3 cluster-worker-3.cluster.example.com:80 check inter 1s
