# /etc/haproxy/haproxy.cfg — External load balancer for OpenShift API and Ingress
# Based on Red Hat's documented example. Suitable for user-provisioned/external LB scenarios.
# Notes:
# - API (6443/TCP) -> control-plane nodes (+ bootstrap during install)
# - Machine Config server (22623/TCP) -> control-plane nodes (+ bootstrap during install; remove bootstrap after control-plane is up)
# - Ingress (443/80 TCP) -> nodes running router pods:
#     * default is workers; in 3-node control-plane-only clusters, routers run on masters.

global
    log 127.0.0.1 local2
    pidfile /var/run/haproxy.pid
    maxconn 4000
    daemon

defaults
    mode tcp
    log global
    option  dontlognull
    option  http-server-close
    option  redispatch
    retries 3
    timeout http-request 10s
    timeout queue        1m
    timeout connect      10s
    timeout client       1m
    timeout server       1m
    timeout http-keep-alive 10s
    timeout check        10s
    maxconn 3000

# Kubernetes API (6443) — health check against /readyz (HTTPS)
listen api-server-6443
    bind *:6443
    mode tcp
    option  httpchk GET /readyz HTTP/1.0
    http-check expect string ok
    balance roundrobin
    # Bootstrap (remove after bootstrap completes)
    server bootstrap bootstrap.cluster.example.com:6443 verify none check check-ssl inter 10s fall 2 rise 3 backup
    # Control-plane nodes (masters)
    server master0 master0.cluster.example.com:6443 weight 1 verify none check check-ssl inter 10s fall 2 rise 3
    server master1 master1.cluster.example.com:6443 weight 1 verify none check check-ssl inter 10s fall 2 rise 3
    server master2 master2.cluster.example.com:6443 weight 1 verify none check check-ssl inter 10s fall 2 rise 3

# Machine Config Server (22623) — health check at /healthz
listen machine-config-server-22623
    bind *:22623
    mode tcp
    option httpchk GET /healthz HTTP/1.0
    balance roundrobin
    # Bootstrap (remove after bootstrap completes)
    server bootstrap bootstrap.cluster.example.com:22623 check inter 1s backup
    # Control-plane nodes only
    server master0 master0.cluster.example.com:22623 check inter 1s
    server master1 master1.cluster.example.com:22623 check inter 1s
    server master2 master2.cluster.example.com:22623 check inter 1s

# Ingress Router — HTTPS (443)
listen ingress-router-443
    bind *:443
    mode tcp
    balance source
    # Use workers by default; for 3-node control-plane clusters, route to masters instead.
    # Example for masters (compact 3-node):
    server master0 master0.cluster.example.com:443 check inter 1s
    server master1 master1.cluster.example.com:443 check inter 1s
    server master2 master2.cluster.example.com:443 check inter 1s
    # Example for workers (uncomment and adjust as needed)
    # server worker0 worker0.cluster.example.com:443 check inter 1s
    # server worker1 worker1.cluster.example.com:443 check inter 1s
    # server worker2 worker2.cluster.example.com:443 check inter 1s

# Ingress Router — HTTP (80)
listen ingress-router-80
    bind *:80
    mode tcp
    balance source
    # Masters for compact clusters:
    server master0 master0.cluster.example.com:80 check inter 1s
    server master1 master1.cluster.example.com:80 check inter 1s
    server master2 master2.cluster.example.com:80 check inter 1s
    # Workers for standard clusters (uncomment and adjust):
    # server worker0 worker0.cluster.example.com:80 check inter 1s
    # server worker1 worker1.cluster.example.com:80 check inter 1s
    # server worker2 worker2.cluster.example.com:80 check inter 1s
